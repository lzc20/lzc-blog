import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as l,e as t,f as n}from"./app-dFtvm7rL.js";const o={},e=n('<h1 id="_01-06-并发编程" tabindex="-1"><a class="header-anchor" href="#_01-06-并发编程" aria-hidden="true">#</a> 01-06-并发编程</h1><h2 id="一、多线程" tabindex="-1"><a class="header-anchor" href="#一、多线程" aria-hidden="true">#</a> 一、多线程</h2><p><strong>什么是多线程？</strong></p><ul><li>多线程（multithreading）是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。</li><li>并发编程：编写多线程代码，解决多线程带来的问题</li></ul><p><strong>为什么要学并发编程？</strong></p><ul><li>首先，来看一个案例：手写网站服务器案例。</li><li>高性能应用程序的一把钥匙，应用程序的翅膀，面试高频的考点</li><li>中间件几乎都是多线程应用：MySQL、ES、Redis，Tomcat，Druid，HikariCP...</li></ul><p><strong>怎么学并发编程？</strong></p><ul><li>多线程核心知识（概念、线程状态、线程安全问题、三大特性）</li><li>同步代码块Synchronized及其实现原理</li><li><strong>volatile关键字及其实现原理</strong></li><li>多线程在JVM中的实现原理</li><li>JUC概述</li><li>原子类Atomic-CAS及其实现原理</li><li>锁Lock-AQS核心原理剖析</li><li>并发工具类、并发容器、阻塞队列</li><li>线程池原理剖析</li><li>线程池案例-Web容器-压力测试</li></ul><h2 id="_1-多线程相关概念" tabindex="-1"><a class="header-anchor" href="#_1-多线程相关概念" aria-hidden="true">#</a> 1. 多线程相关概念</h2><h3 id="_1-1-线程和进程" tabindex="-1"><a class="header-anchor" href="#_1-1-线程和进程" aria-hidden="true">#</a> 1.1 线程和进程</h3><ul><li><strong>进程</strong>：是指内存中运行的一个应用程序，每个进程都有自己独立的内存空间；进程也是程序的一次执行过程，是<strong>系统运行程序的基本单位</strong>；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</li><li><strong>线程</strong>：是<strong>进程中的一个执行单元</strong>，负责当前进程中任务的执行。一个进程在其执行过程中，会产生很多个线程。</li></ul><p><strong>进程与线程区别：</strong></p><ul><li>进程：有独立<strong>内存空间</strong>，每个进程中的数据空间都是独立的。</li><li>线程：多线程之间<strong>堆空间</strong>与<strong>方法区</strong>是共享的，但每个线程的<strong>栈空间</strong>、<strong>程序计数器</strong>是独立的，线程消耗的资源比进程小的多。</li></ul><h4 id="_1-1-1-什么是并发与并行" tabindex="-1"><a class="header-anchor" href="#_1-1-1-什么是并发与并行" aria-hidden="true">#</a> 1.1.1 什么是并发与并行？</h4><ul><li><strong>并发（Concurrent）</strong>：同一时间段，多个任务都在执行 ，单位时间内不⼀定同时执行。</li><li><strong>并行（Parallel）</strong>：单位时间内，多个任务同时执行，单位时间内一定是同时执行。并行上限取决于CPU核数（CPU时间片内50ms）</li></ul><p><strong>注意：并发是一种能力，而并行是一种手段。*</strong>*注意：并发是一种能力，而并行是一种手段。** 当我们的系统拥有了并发的能力后，代码如果跑在多核CPU上就可以并行运行。所以咱们会说高并发处理，而不会说高并行处理。并行处理是基于硬件CPU的是固定的，而并发处理的能力是可以通过设计编码进行提高的。 当我们的系统拥有了并发的能力后，代码如果跑在多核CPU上就可以并行运行。所以咱们会说高并发处理，而不会说高并行处理。并行处理是基于硬件CPU的是固定的，而并发处理的能力是可以通过设计编码进行提高的。</p>',16);function a(s,d){return i(),l("div",null,[t(" `more` 注释之前的内容被视为文章摘要。 "),e])}const c=r(o,[["render",a],["__file","06-并发编程.html.vue"]]);export{c as default};
