import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as c,c as d,a,b as n,d as e,f as i}from"./app-soRPTOsE.js";const p="/lzc-blog.github.io/assets/1705306589563-ilDnXMDb.png",r="/lzc-blog.github.io/assets/1705307029758-5ngO5ZYu.png",o={},u=i(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>GitLab CI/CD 是一个内置在GitLab中的工具，用于通过持续方法进行软件开发：</p><ul><li>Continuous Integration (CI) 持续集成</li><li>Continuous Delivery (CD) 持续交付</li><li>Continuous Deployment (CD) 持续部署</li></ul><p>使用GitLab CI/CD，还可以：</p><ul><li>通过Auto DevOps轻松设置应用的整个生命周期</li><li>将应用程序部署到不同的环境</li><li>安装你自己的GitLab Runner</li><li>Schedule pipelines</li><li>使用安全测试报告（Security Test reports）检查应用程序漏洞</li></ul><h2 id="使用cicd管理自动化部署。" tabindex="-1"><a class="header-anchor" href="#使用cicd管理自动化部署。" aria-hidden="true">#</a> 使用CICD管理自动化部署。</h2><h2 id="一、安装gatlub" tabindex="-1"><a class="header-anchor" href="#一、安装gatlub" aria-hidden="true">#</a> 一、安装gatlub</h2><p>1、安装依赖： 在安装 GitLab 之前，确保系统上已经安装了必要的依赖，如 curl、openssh-server 和 postfix（用于发送邮件通知）。 2、添加 GitLab 仓库并安装： 使用 curl 命令添加 GitLab 仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 GitLab 社区版（CE）或企业版（EE）：</p><div class="language-sehll line-numbers-mode" data-ext="sehll"><pre class="language-sehll"><code>sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; apt-get install gitlab-ee 替换 http://gitlab.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为你的域名或 IP 地址。 3、配置和启动 GitLab： 安装完成后， 运行配置命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo gitlab-ctl reconfigure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 GitLab 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo gitlab-ctl start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>置管理员密码：</p><p>访问 GitLab：在浏览器中输入 http://gitlab.example.com（替换为你的域名或 IP 地址）访问 GitLab 页面。 首次访问时，需要设置管理员密码以及登录信息。 在安装 GitLab CE 后，您需要设置一个管理员账号和密码，以便登录 GitLab CE 的 Web 界面。一般情况下，初始登录密码是随机生成的，并在安装过程中向您显示了该密码。如果您没有记录该密码，那么可以通过以下步骤来重置管理员密码：</p><ul><li><p>打开 GitLab CE 的服务器终端，并以 root 用户身份登录。</p></li><li><p>运行以下命令以打开 GitLab Rails 控制台： gitlab-rails console</p></li><li><p>运行以下命令以获取管理员账号的 user_id：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user <span class="token operator">=</span> User.where<span class="token punctuation">(</span>id: <span class="token number">1</span><span class="token punctuation">)</span>.first
puts user.id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行以下命令以重置管理员密码：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">user.password</span><span class="token operator">=</span><span class="token string">&#39;R#2sT8@pW!d3Md&#39;</span>
<span class="token assign-left variable">user.password_confirmation</span><span class="token operator">=</span><span class="token string">&#39;R#2sT8@pW!d3Md&#39;</span>
user.save<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，new_password 是您要设置的新密码。</p><ul><li>关闭 GitLab Rails 控制台并重新启动 GitLab CE：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>exitg
gitlab-ctl restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用新密码登录 GitLab CE 的 Web 界面。</p><h2 id="二、配置-gitlab-的-ci-cd" tabindex="-1"><a class="header-anchor" href="#二、配置-gitlab-的-ci-cd" aria-hidden="true">#</a> 二、配置 GitLab 的 CI/CD</h2><p>GitLab 项目的 CI/CD 配置中使用该 Runner 来运行<strong>持续集成和持续交付任务</strong>。</p><p>注意： centos7，与 Ubuntu（乌班图系统）存在差异，命令方式存在不同，以下是乌班图的</p><p>添加 GitLab Runner 的官方存储库并安装它：</p><p>2.1、添加存储库密钥：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -L https://packages.gitlab.com/gpg.key | sudo apt-key add -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2、添加存储库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu/ $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/gitlab-runner.list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.3、更新包列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.4、安装 GitLab Runner：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt install gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.5.重启相关的服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl daemon-reload
sudo systemctl restart gitlab-runner.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.6.确认GitLab Runner是否已经成功安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitlab-runner --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些步骤将从官方存储库中安装最新版本的 GitLab Runner。</p><h2 id="三、配置gitlaub的-gitlab-ci-yml文件" tabindex="-1"><a class="header-anchor" href="#三、配置gitlaub的-gitlab-ci-yml文件" aria-hidden="true">#</a> 三、配置gitlaub的.gitlab-ci.yml文件</h2><p>在根目录中的.gitlab-ci.yml文件中指定构建、测试和部署的脚本。</p><p>在这里我只是将军一个简单的Java项目如何进行配置。</p><p>我得文件是这样：<strong>.gitlab-ci.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">image</span><span class="token punctuation">:</span> maven<span class="token punctuation">:</span>3.8.4<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span><span class="token number">8</span>

<span class="token key atrule">stages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> build
  <span class="token punctuation">-</span> deploy

<span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> cd testSpringBoot  <span class="token comment"># 进入到项目文件夹</span>
    <span class="token punctuation">-</span> mvn clean package

  <span class="token key atrule">artifacts</span><span class="token punctuation">:</span>
    <span class="token key atrule">paths</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> testSpringBoot/target/testSpringBoot<span class="token punctuation">-</span>0.0.1<span class="token punctuation">-</span>SNAPSHOT.jar <span class="token comment"># 指定构建产物的路径</span>

<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy
  <span class="token key atrule">image</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>20.10.7
  <span class="token key atrule">services</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> docker<span class="token punctuation">:</span>20.10.7<span class="token punctuation">-</span>dind
  <span class="token key atrule">tags</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> test2
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> cd testSpringBoot
    <span class="token punctuation">-</span> docker build <span class="token punctuation">-</span>t app<span class="token punctuation">-</span>test .
    <span class="token punctuation">-</span> docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>network=host <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8080<span class="token punctuation">:</span>8080 app<span class="token punctuation">-</span>test

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且还需要配置dockerfile</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8-jdk-alpine</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># 复制应用程序代码到镜像中</span>
<span class="token instruction"><span class="token keyword">COPY</span> target/testSpringBoot-0.0.1-SNAPSHOT.jar /app/app.jar</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 运行应用程序</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;app.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><p>在这边我遇到了一个问题？</p><p>部署的时候依赖可以加载，总是出现一种错误给大家看下？</p><figure><img src="`+p+'" alt="docker连接不上" tabindex="0" loading="lazy"><figcaption>docker连接不上</figcaption></figure><p>后来这个事情，我询问了大佬说是在配置文件当中我们还需要加点东西，</p><p>在gitlab-runner的配置文件中处理</p><p><strong>/etc/gitlab-runner/config.toml</strong> 在这个地址也是注册执行器的地方，多个执行器配置在这里配置runners</p><figure><img src="'+r+'" alt="gitlab-runner注册执行器配置文件" tabindex="0" loading="lazy"><figcaption>gitlab-runner注册执行器配置文件</figcaption></figure><p>volumes挂载的卷：我之前没用挂载这个配置导致docekr 容器总是连接不上的，不知道为什么。</p><p>原因在此：</p><p>在Docker中，使用<code>-v</code>或<code>--mount</code>参数进行卷挂载时，如果主机上的卷不存在，则会自动创建。如果不挂载<code>/var/run/docker.sock:/var/run/docker.sock</code>和<code>/cache</code>这两个卷，可能会导致容器无法连接Docker守护进程，从而导致作业失败并返回错误码1。</p><p><code>/var/run/docker.sock:/var/run/docker.sock</code>卷用于连接Docker守护进程</p><p><code>/cache</code>卷可能用于存储容器的数据。</p><p>我们在用docker作为执行器的话会进行连接守护线程。总s算找到原因了。哈哈</p>',63),v={href:"https://www.cnblogs.com/cjsblog",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/cjsblog/p/12256843.html",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="如果缺失服务器里面没有maven也需要安装下" tabindex="-1"><a class="header-anchor" href="#如果缺失服务器里面没有maven也需要安装下" aria-hidden="true">#</a> 如果缺失服务器里面没有maven也需要安装下</h2><p>在 Ubuntu 系统下安装 Maven，你可以按照以下步骤进行操作：</p><ol><li><p>打开终端（Terminal）。</p></li><li><p>更新系统软件包列表，使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装 Maven，使用以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt install maven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在安装过程中，你可能需要输入管理员密码进行确认。</p></li><li><p>安装完成后，可以通过以下命令验证 Maven 是否成功安装：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mvn -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果成功安装，你将看到 Maven 的版本信息。</p></li></ol><p>现在，Maven 已经成功安装在你的 Ubuntu 系统上，你可以使用它来构建和管理 Java 项目。</p>`,4);function g(k,h){const s=l("ExternalLinkIcon");return c(),d("div",null,[u,a("p",null,[n("以上有部分内容来源博客园："),a("a",v,[n("狂乱的贵公子"),e(s)]),n(),a("a",b,[n("GitLab CI/CD"),e(s)])]),m])}const y=t(o,[["render",g],["__file","Gitlab的CICD.html.vue"]]);export{y as default};
