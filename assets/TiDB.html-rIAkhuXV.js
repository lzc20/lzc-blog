import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as l,f as t}from"./app-soRPTOsE.js";const e="/lzc-blog.github.io/assets/1704095267874-slUQ2iMu.png",g="/lzc-blog.github.io/assets/1704095418904-AYpSwbni.png",r="/lzc-blog.github.io/assets/1704110504705-5t_vvvfp.png",s="/lzc-blog.github.io/assets/1704111575759-H_5VeFmO.png",o="/lzc-blog.github.io/assets/1704111960712-AItdIpci.png",n="/lzc-blog.github.io/assets/1704112314173-aaBqLG2N.png",p="/lzc-blog.github.io/assets/1704112362274-YOH4570q.png",c="/lzc-blog.github.io/assets/1704265043314-XV8c48gy.png",d="/lzc-blog.github.io/assets/1704265704368-0tqFsq7j.png",h="/lzc-blog.github.io/assets/1704265925177-xMWhwOI2.png",f="/lzc-blog.github.io/assets/1704266024445-34JsKB3O.png",u="/lzc-blog.github.io/assets/1704266564446-m-BmxsSo.png",m="/lzc-blog.github.io/assets/1704266977898-PTFXIJ86.png",b="/lzc-blog.github.io/assets/1704355546296-SvTxl6Fc.png",_="/lzc-blog.github.io/assets/1704355773435-QbSJvXNx.png",z="/lzc-blog.github.io/assets/1704355938679-3aigU3Ga.png",T="/lzc-blog.github.io/assets/1704356115173-wm3W9hsl.png",x="/lzc-blog.github.io/assets/1704356408987-l_jorE6N.png",D="/lzc-blog.github.io/assets/1704356527475--HqbZVE2.png",v={},y=t('<h1 id="_01-tidb-数据库架构概述" tabindex="-1"><a class="header-anchor" href="#_01-tidb-数据库架构概述" aria-hidden="true">#</a> 01 TiDB 数据库架构概述</h1><ul><li>水平扩容或者缩容</li><li>金融高级可用</li><li>实时HTAP</li><li>云原生的分布式数据库</li><li>兼容MySQL5.7协议</li></ul><figure><img src="'+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_1、tidb-server" tabindex="-1"><a class="header-anchor" href="#_1、tidb-server" aria-hidden="true">#</a> 1、TiDB Server</h2><ul><li>处理客户端的连接</li><li>Sql语句的解释和编译</li><li>关系型数据与KV的转化</li><li>SQL语句的执行</li><li>执行online DDL</li><li>垃圾回收（删除历史版本的数据）</li></ul><figure><img src="'+g+'" alt="1704095418904" tabindex="0" loading="lazy"><figcaption>1704095418904</figcaption></figure><h2 id="_2、tikv" tabindex="-1"><a class="header-anchor" href="#_2、tikv" aria-hidden="true">#</a> 2、TiKV</h2><ul><li>数据持久化</li><li>副本的强一致性和高可用性</li><li>MVCC（多版本并发控制）</li><li>分布式事务支持</li><li>Coprocessor （算子下推‘）（每一个结点可以做一些计算工作----分布式计算模型）</li></ul><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Raft修改会把协议应用到 副本上 在哦才能够leding上复制导副本上</p><h2 id="_3、placement-driver" tabindex="-1"><a class="header-anchor" href="#_3、placement-driver" aria-hidden="true">#</a> 3、Placement Driver</h2><p>整个集群的大脑</p><ul><li><p>整个集群TiKV的元数据存储</p></li><li><p>分配全局ID和事务ID</p></li><li><p>生成全局时间戳TSO</p></li><li><p>收集信息进行调度</p></li><li><p>提供部分TIDB Dashboard 服务</p><figure><img src="'+s+'" alt="1704111575759" tabindex="0" loading="lazy"><figcaption>1704111575759</figcaption></figure></li></ul><h2 id="_4、tiflash" tabindex="-1"><a class="header-anchor" href="#_4、tiflash" aria-hidden="true">#</a> 4、TIFlash</h2><p>可以列存的版本（Tikv中的修改会同步在TiFlash上面）</p><p>横存储适合交易型业务（OLTP业务），列存适合于分析型业务（OLAP）数据（引入列存可提高分析的效率）</p><ul><li>异步复制</li><li>一致性</li><li>列式存储提高分析查询效率</li><li>业务隔离</li><li>智能选择（使用了TIDB Server SQL优化器）</li></ul><figure><img src="'+o+'" alt="1704111960712" tabindex="0" loading="lazy"><figcaption>1704111960712</figcaption></figure><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><p>本次小结：</p><ul><li>描述TiDB数据库的整体架构</li><li>理解，TIDB Server，TiKV，TiFlash和PD的主要功能。<img src="'+n+'" alt="1704112314173" loading="lazy"></li></ul><figure><img src="'+p+'" alt="1704112362274" tabindex="0" loading="lazy"><figcaption>1704112362274</figcaption></figure><h1 id="_02-tidb-server-无状态的" tabindex="-1"><a class="header-anchor" href="#_02-tidb-server-无状态的" aria-hidden="true">#</a> 02 TiDB Server（无状态的）</h1><h2 id="章节目标" tabindex="-1"><a class="header-anchor" href="#章节目标" aria-hidden="true">#</a> 章节目标</h2><p>数据放在哪里？我们是放在tiKV上的</p><p>TiDB Serve主要的功能：接受客户端的连接，不存储数据，只是做sql解析，和优化生成执行计划---&gt;TiKV中读取数据（TiDBServer缓存）来返回给用户</p><ul><li>TiDB Server架构</li><li>TiDB Server作用</li><li>TiDB Server的进程</li><li>TiDBServer的缓存</li></ul><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Protocol Layer 、Parse、Complied主要负责sql语句的解析和编译，这几个模块处理会生成sql语句的执行计划。</p><p>PDClient TIKV Cline 负责分别和PD和TIkV来交互（所有sql的请求都是通过TikV Client和TiKV来进行交互的）。</p><p>获得时间戳SPO啥的都是通过PD Client 和PD来交互得到的。</p><p>schema load \\ worker \\ start job 由这三个模块来执行DDL语句</p><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-2sql语句的解析和翻译" tabindex="-1"><a class="header-anchor" href="#_2-2sql语句的解析和翻译" aria-hidden="true">#</a> 2.2SQL语句的解析和翻译</h2><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+f+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>关系型数据库要和KV型数据库要进行转换。</p><p>TIKV是将关系型数据库的表转化成了KV形式</p><p>K取了主键和表的编号，剩余列作为值（聚簇表）</p><p>regison 是TIDB里面的单位，一个便俩个，俩个变四个</p><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>DisSQl把复杂表转化成立对单个表的操作的一个一个的组合，涉及到一张表但是会多个regison。</p><p>简单sql 走KV模块，对应点查询， Tikiv client主要对集群发送读写请求</p><h2 id="在线ddl-数据定义语言-相关模块" tabindex="-1"><a class="header-anchor" href="#在线ddl-数据定义语言-相关模块" aria-hidden="true">#</a> 在线DDL（数据定义语言）相关模块</h2><p>不会阻塞读写，同一时刻只能有一个做ddl操作</p><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>多版本并发控制，TidDB是使用go语言开发的。</p><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>默认使用的全部内存</p><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>读取笔记频繁，大量，又频繁，只是读或者修改不频繁的表。</p><p>存在数据不一直，先改缓存，还是磁盘？</p><p>热点小表缓存，如何实现，，解决不一致的问题。</p><p>64mb以下。</p><figure><img src="'+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如何保证，缓存一致？</p><ul><li><p>缓存租约5秒，在5秒内我们可以读取缓存数据</p></li><li><p>如果用户要写这张表写不了锁表阻塞，等租约到期，租约中只能读不能写。</p></li><li><p>租约到期，小表在内存中到期了，这个时候可以写，直接写入TIKV，这个时候读的话直接读tikv。也就说这个时候读取的时候性能笔记差劲。</p><p>租约的方式来进行的数据库一致性，。</p><figure><img src="'+x+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+D+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ul><h1 id="_03tikv-持久化" tabindex="-1"><a class="header-anchor" href="#_03tikv-持久化" aria-hidden="true">#</a> 03TiKV-持久化</h1>',59),S=[y];function B(V,K){return a(),l("div",null,S)}const P=i(v,[["render",B],["__file","TiDB.html.vue"]]);export{P as default};
