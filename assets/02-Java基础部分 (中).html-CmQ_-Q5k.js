import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as d,c as n,a,b as e,d as h,f as t}from"./app-soRPTOsE.js";const o={},c=a("h1",{id:"_01-02java基础-中",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_01-02java基础-中","aria-hidden":"true"},"#"),e(" 01-02Java基础（中）")],-1),p=a("h2",{id:"面向对象基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#面向对象基础","aria-hidden":"true"},"#"),e(" 面向对象基础")],-1),s={href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"},u=t('<p>在我这里我只选择我自己想要记录的记录下来</p><h3 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别" aria-hidden="true">#</a> 面向对象和面向过程的区别？</h3><p>Java是一种面向对象的编程语言，与面向过程的编程方式有一些显著的区别。</p><ol><li>抽象级别不同： <ul><li>面向过程：关注解决问题的步骤和过程，将程序分解为一系列的函数或者过程。</li><li>面向对象：关注问题中的实体及其相互之间的交互关系，将程序设计为一组对象的集合。</li></ul></li><li>对象的思维方式： <ul><li>面向过程：以功能为中心，按照步骤执行任务。</li><li>面向对象：以对象为中心，通过对象之间的交互来完成任务。</li></ul></li><li>数据和方法的封装： <ul><li>面向过程：数据和方法是分开的，函数对数据进行操作。</li><li>面向对象：将数据和方法封装在对象中，对象对自身的数据和方法进行管理和操作。</li></ul></li><li>继承与多态性： <ul><li>面向过程：没有继承和多态的概念。</li><li>面向对象：通过继承和多态性实现代码的重用和灵活性。</li></ul></li><li>设计思想： <ul><li>面向过程：自顶向下、逐步求精的设计方式。</li><li>面向对象：自底向上、从整体到部分的设计方式。</li></ul></li></ol><p>总体来说，面向对象的编程更加强调代码的可重用性、可扩展性和可维护性，通过封装、继承和多态等特性来实现。而面向过程的编程更加关注解决问题的步骤和过程，以函数或者过程为中心进行编程。在实际开发中，根据具体的需求和项目规模选择合适的编程方式是很重要的</p><h3 id="创建一个对象用什么运算符-对象实体与对象引用有何不同" tabindex="-1"><a class="header-anchor" href="#创建一个对象用什么运算符-对象实体与对象引用有何不同" aria-hidden="true">#</a> 创建一个对象用什么运算符?对象实体与对象引用有何不同?</h3><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</p><ul><li>一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）；</li><li>一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</li></ul><h3 id="对象的相等和引用相等的区别" tabindex="-1"><a class="header-anchor" href="#对象的相等和引用相等的区别" aria-hidden="true">#</a> 对象的相等和引用相等的区别</h3><ul><li>对象的相等一般比较的是内存中存放的内容是否相等。</li><li>引用相等一般比较的是他们指向的内存地址是否相等。</li></ul><h3 id="如果一个类没有声明构造方法-该程序能正确执行吗" tabindex="-1"><a class="header-anchor" href="#如果一个类没有声明构造方法-该程序能正确执行吗" aria-hidden="true">#</a> 如果一个类没有声明构造方法，该程序能正确执行吗?</h3><p>构造方法是一种特殊的方法，主要作用是完成对象的初始化工作。</p><p>如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会添加默认的无参数的构造方法了。</p><p>我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p><h3 id="构造方法有哪些特点-是否可被-override" tabindex="-1"><a class="header-anchor" href="#构造方法有哪些特点-是否可被-override" aria-hidden="true">#</a> 构造方法有哪些特点？是否可被 override?</h3><p>构造方法特点如下：</p><ul><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ul><p>构造方法不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h3 id="面向对象三大特征" tabindex="-1"><a class="header-anchor" href="#面向对象三大特征" aria-hidden="true">#</a> 面向对象三大特征?</h3><p>封装：把一个些属性特征搞成一个对象。</p><p>继承：继承家业，但是爸爸的女人你不能有这是私人的。只能继承公共的</p><p>多态：一个对象具有多种状态，具体表现为父类的引用指向子类的实例</p><ul><li><p>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</p></li><li><p>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</p></li><li><p>多态不能调用“只在子类存在但在父类不存在”的方法；</p></li><li><p>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法</p></li></ul>',23);function _(v,f){const i=r("ExternalLinkIcon");return d(),n("div",null,[c,p,a("p",null,[e("观看Javaguid学习笔记这是。具体请去看： "),a("a",s,[e("JavaGuide（Java面试+学习指南）"),h(i)])]),u])}const m=l(o,[["render",_],["__file","02-Java基础部分 (中).html.vue"]]);export{m as default};
