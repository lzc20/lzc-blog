import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as i,a as n,b as a,d as o,f as l}from"./app-h9U8uF2l.js";const c={},d=n("h1",{id:"_01-02java基础-中",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01-02java基础-中","aria-hidden":"true"},"#"),a(" 01-02Java基础（中）")],-1),u=n("h2",{id:"面向对象基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#面向对象基础","aria-hidden":"true"},"#"),a(" 面向对象基础")],-1),r={href:"https://javaguide.cn/",target:"_blank",rel:"noopener noreferrer"},k=l(`<p>在我这里我只选择我自己想要记录的记录下来</p><h3 id="面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#面向对象和面向过程的区别" aria-hidden="true">#</a> 面向对象和面向过程的区别？</h3><p>Java是一种面向对象的编程语言，与面向过程的编程方式有一些显著的区别。</p><ol><li>抽象级别不同： <ul><li>面向过程：关注解决问题的步骤和过程，将程序分解为一系列的函数或者过程。</li><li>面向对象：关注问题中的实体及其相互之间的交互关系，将程序设计为一组对象的集合。</li></ul></li><li>对象的思维方式： <ul><li>面向过程：以功能为中心，按照步骤执行任务。</li><li>面向对象：以对象为中心，通过对象之间的交互来完成任务。</li></ul></li><li>数据和方法的封装： <ul><li>面向过程：数据和方法是分开的，函数对数据进行操作。</li><li>面向对象：将数据和方法封装在对象中，对象对自身的数据和方法进行管理和操作。</li></ul></li><li>继承与多态性： <ul><li>面向过程：没有继承和多态的概念。</li><li>面向对象：通过继承和多态性实现代码的重用和灵活性。</li></ul></li><li>设计思想： <ul><li>面向过程：自顶向下、逐步求精的设计方式。</li><li>面向对象：自底向上、从整体到部分的设计方式。</li></ul></li></ol><p>总体来说，面向对象的编程更加强调代码的可重用性、可扩展性和可维护性，通过封装、继承和多态等特性来实现。而面向过程的编程更加关注解决问题的步骤和过程，以函数或者过程为中心进行编程。在实际开发中，根据具体的需求和项目规模选择合适的编程方式是很重要的</p><h3 id="创建一个对象用什么运算符-对象实体与对象引用有何不同" tabindex="-1"><a class="header-anchor" href="#创建一个对象用什么运算符-对象实体与对象引用有何不同" aria-hidden="true">#</a> 创建一个对象用什么运算符?对象实体与对象引用有何不同?</h3><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。</p><ul><li>一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）；</li><li>一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</li></ul><h3 id="对象的相等和引用相等的区别" tabindex="-1"><a class="header-anchor" href="#对象的相等和引用相等的区别" aria-hidden="true">#</a> 对象的相等和引用相等的区别</h3><ul><li>对象的相等一般比较的是内存中存放的内容是否相等。</li><li>引用相等一般比较的是他们指向的内存地址是否相等。</li></ul><h3 id="如果一个类没有声明构造方法-该程序能正确执行吗" tabindex="-1"><a class="header-anchor" href="#如果一个类没有声明构造方法-该程序能正确执行吗" aria-hidden="true">#</a> 如果一个类没有声明构造方法，该程序能正确执行吗?</h3><p>构造方法是一种特殊的方法，主要作用是完成对象的初始化工作。</p><p>如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会添加默认的无参数的构造方法了。</p><p>我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。</p><h3 id="构造方法有哪些特点-是否可被-override" tabindex="-1"><a class="header-anchor" href="#构造方法有哪些特点-是否可被-override" aria-hidden="true">#</a> 构造方法有哪些特点？是否可被 override?</h3><p>构造方法特点如下：</p><ul><li>名字与类名相同。</li><li>没有返回值，但不能用 void 声明构造函数。</li><li>生成类的对象时自动执行，无需调用。</li></ul><p>构造方法不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。</p><h3 id="面向对象三大特征" tabindex="-1"><a class="header-anchor" href="#面向对象三大特征" aria-hidden="true">#</a> 面向对象三大特征?</h3><p>封装：把一个些属性特征搞成一个对象。</p><p>继承：继承家业，但是爸爸的女人你不能有这是私人的。只能继承公共的，并且可以扩大家业，也可用自己的方式来实现父类的方法</p><p>多态：一个对象具有多种状态，具体表现为父类的引用指向子类的实例</p><ul><li><p>对象类型和引用类型之间具有继承（类）/实现（接口）的关系；</p></li><li><p>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；</p></li><li><p>多态不能调用“只在子类存在但在父类不存在”的方法；</p></li><li><p>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法</p></li></ul><h3 id="接口和抽象类有什么共同点和区别" tabindex="-1"><a class="header-anchor" href="#接口和抽象类有什么共同点和区别" aria-hidden="true">#</a> 接口和抽象类有什么共同点和区别？</h3><p>共同点：</p><ul><li>都不能实列化</li><li>都可以包含抽象方法</li><li>都有默认的实现方法</li></ul><p>区别：</p><ul><li>接口主要对于类的行为进行约束，你实现了某个接口就具有对应的行为，抽象类主要用于代码服用，强调的所属关系，</li><li>一个类只能继承一个类，但是可以实现多个接口</li><li>接口中的成员变量只能 <code>public static final</code> 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认default，可在子类中被重新定义，也可被重新赋值。</li></ul><h3 id="深拷贝和浅拷贝了解么-什么是引用拷贝》" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝了解么-什么是引用拷贝》" aria-hidden="true">#</a> 深拷贝和浅拷贝了解么？什么是引用拷贝》</h3><p>guide哥说：</p><ul><li><p><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别与引用拷贝），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用一个内部对象。</p></li><li><p><strong>深拷贝</strong> ：深拷贝是完全复制整个对象包含内部对象。就说都是自己的</p></li></ul><p>![浅拷贝、深拷贝、引用拷贝示意图](02-Java基础部分 (中).assets/shallow&amp;deep-copy.png)</p><p><strong>那什么是引用拷贝呢？</strong> 简单来说，引用拷贝就是两个不同的引用指向同一个对象。</p><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><h3 id="object类常见的方法有哪些" tabindex="-1"><a class="header-anchor" href="#object类常见的方法有哪些" aria-hidden="true">#</a> Object类常见的方法有哪些？</h3><p>Object是一个特殊的类是所有类的父类。它主要提供了以下11哥方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * native 方法，用于创建并返回当前对象的一份拷贝。
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span>
<span class="token doc-comment comment">/**
 * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token doc-comment comment">/**
 * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
<span class="token doc-comment comment">/**
 * 多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
<span class="token doc-comment comment">/**
 * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span>
<span class="token doc-comment comment">/**
 * 实例被垃圾回收器回收的时候触发的操作
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与equals-的区别" tabindex="-1"><a class="header-anchor" href="#与equals-的区别" aria-hidden="true">#</a> ==与equals()的区别</h3><p>一个比较的是地址，一个比较的是内容，基本类型和引用类型来说明</p><p>String中的<code>equals</code>方法是被重写过的因为<code>Object</code>的<code>euqals()</code>方法是比较对象的内存地址，而<code>String</code>的<code>equals</code>方法是比较的对象的值。</p><p>当创建<code>String</code>类型的对象时候，虚拟机会在常量池中找有没有以及村子啊的值和要创建的值相同的对象，如果有就会把他赋给当前引用，如果没有就在常量池中创建一个/string对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashcode-有什么用呢" tabindex="-1"><a class="header-anchor" href="#hashcode-有什么用呢" aria-hidden="true">#</a> HashCode()有什么用呢？</h3><p>hashCode的作用是获取哈希码（int整数），也称之为散列码。这个哈希码作用是确定对象在哈希表中的索引位置。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/java/basis/java-hashcode-method.png" alt="hashCode(02-Java基础部分 (中).assets/java-hashcode-method.png) 方法" tabindex="0" loading="lazy"><figcaption>hashCode(02-Java基础部分 (中).assets/java-hashcode-method.png) 方法</figcaption></figure><p>hashCode（）定义在JDK的Object类中，这就意味着Java中的任务类都包含HashCode这个函数。另外需要注意的是，hashCode方法是本地方法，就是用C语言或者C++来实现的。</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public native int hashCode();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>散列表存储的键值怼（Key-value），他的特点是：能够根据建快速检索出对应的值，这其中就利用了散列码。</p><h3 id="为什么要有hashcode" tabindex="-1"><a class="header-anchor" href="#为什么要有hashcode" aria-hidden="true">#</a> 为什么要有HashCode？</h3><p>hashSet如何检查重复的？</p>`,50);function v(h,m){const s=t("ExternalLinkIcon");return p(),i("div",null,[d,u,n("p",null,[a("观看Javaguid学习笔记这是。具体请去看： "),n("a",r,[a("JavaGuide（Java面试+学习指南）"),o(s)])]),k])}const f=e(c,[["render",v],["__file","02-Java基础部分 (中).html.vue"]]);export{f as default};
