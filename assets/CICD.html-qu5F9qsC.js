import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as c,c as s,a as e,b as a,d as o,f as i}from"./app-eX7_17YV.js";const d={},C=e("h2",{id:"什么是ci-cd",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是ci-cd","aria-hidden":"true"},"#"),a(" 什么是CI/CD?")],-1),h={href:"https://www.redhat.com/zh/topics/devops/what-is-ci-cd?cicd=32h281b",target:"_blank",rel:"noopener noreferrer"},p=i('<p>CI/CD 是一种通过在<strong>应用开发</strong>阶段引入 <strong>自动化</strong> 来频繁向客户交<strong>应用</strong>的方法。CI/CD 的核心概念是持续集成、<strong>持续交付</strong>和持续部署。作为一种面向开发和运维团队的解决方案，CI/CD 主要针对在 <strong>集成</strong> 新代码时所引发的问题</p><h2 id="什么是ci持续集成" tabindex="-1"><a class="header-anchor" href="#什么是ci持续集成" aria-hidden="true">#</a> 什么是CI持续集成？</h2><p>现代应用开发的目标是让多位开发人员同时处理同一应用的不同功能。但是，如果企业安排在一天内将所有分支源代码合并在一起（称为“合并日”），最终可能造成工作繁琐、耗时，而且需要手动完成。这是因为当一位独立工作的开发人员对应用进行更改时，有可能会与其他开发人员同时进行的更改发生冲突。如果每个开发人员都自定义自己的本地 <strong>集成开发环境IDE</strong> ，而不是让团队就一个基于云的 IDE 达成一致，那么就会让问题更加雪上加霜。</p><p>持续集成（CI）可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或“主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p><h2 id="什么是cd持续交付" tabindex="-1"><a class="header-anchor" href="#什么是cd持续交付" aria-hidden="true">#</a> 什么是CD持续交付？</h2><p>完成成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p><p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中。</p><h2 id="什么是cd持续部署" tabindex="-1"><a class="header-anchor" href="#什么是cd持续部署" aria-hidden="true">#</a> 什么是CD持续部署？</h2><p>对于一个成熟的 CI/CD 管道来说，最后的阶段是持续部署。作为持续交付——自动将生产就绪型构建版本发布到代码存储库——的延伸，持续部署可以自动将应用发布到生产环境。由于在生产之前的管道阶段没有手动门控，因此持续部署在很大程度上都得依赖精心设计的测试自动化。</p><p>实际上，持续部署意味着开发人员对云应用的更改在编写后的几分钟内就能生效（假设它通过了自动化测试）。这更加便于持续接收和整合用户反馈。总而言之，所有这些 CI/CD 的关联步骤都有助于降低应用的部署风险，因此更便于以小件的方式（而非一次性）发布对应用的更改。不过，由于还需要编写自动化测试以适应 CI/CD 管道中的各种测试和发布阶段，因此前期投资还是会很大。</p><h2 id="常用的-ci-cd-工具有哪些" tabindex="-1"><a class="header-anchor" href="#常用的-ci-cd-工具有哪些" aria-hidden="true">#</a> 常用的 CI/CD 工具有哪些？</h2><p>CI/CD 工具可以协助团队自动进行开发、部署和测试。有些工具专门处理集成（CI）方面的问题，有些工具负责管理开发和部署（CD）工作，而另外一些工具则专注于持续测试或相关功能。</p><p>针对 CI/CD 的最著名的开源工具之一就是自动化服务器 Jenkins。从简单的 CI 服务器到完整的 CD 集线器，Jenkins 都可以处理。</p><p>大家所熟知的CI/CD工具有：1、Jenkins；2、GitLab；3、Buddy；4、TeamCity；5、Travis CI。Jenkins是一个用于自动化的开源服务器，在其中进行集中开发和持续集成的过程。它是一个基于Java的、自包含的、跨平台的CI/CD工具，带有Windows、macOS和其他类Unix操作系统包。</p><p>我目前公司所使用的就是有Jenkins和Gitlab俩种方式</p>',15);function I(l,_){const n=t("ExternalLinkIcon");return c(),s("div",null,[C,e("p",null,[e("a",h,[a("红帽上面是这样说的"),o(n)])]),p])}const g=r(d,[["render",I],["__file","CICD.html.vue"]]);export{g as default};
