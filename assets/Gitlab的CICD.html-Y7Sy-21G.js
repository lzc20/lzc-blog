import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as l,c as r,a,b as e,d as i,f as d}from"./app-eX7_17YV.js";const c={},o=d(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>GitLab CI/CD 是一个内置在GitLab中的工具，用于通过持续方法进行软件开发：</p><ul><li>Continuous Integration (CI) 持续集成</li><li>Continuous Delivery (CD) 持续交付</li><li>Continuous Deployment (CD) 持续部署</li></ul><p>使用GitLab CI/CD，还可以：</p><ul><li>通过Auto DevOps轻松设置应用的整个生命周期</li><li>将应用程序部署到不同的环境</li><li>安装你自己的GitLab Runner</li><li>Schedule pipelines</li><li>使用安全测试报告（Security Test reports）检查应用程序漏洞</li></ul><h2 id="使用cicd管理自动化部署。" tabindex="-1"><a class="header-anchor" href="#使用cicd管理自动化部署。" aria-hidden="true">#</a> 使用CICD管理自动化部署。</h2><h3 id="一、安装gatlub" tabindex="-1"><a class="header-anchor" href="#一、安装gatlub" aria-hidden="true">#</a> 一、安装gatlub</h3><p>1、安装依赖： 在安装 GitLab 之前，确保系统上已经安装了必要的依赖，如 curl、openssh-server 和 postfix（用于发送邮件通知）。 2、添加 GitLab 仓库并安装： 使用 curl 命令添加 GitLab 仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 GitLab 社区版（CE）或企业版（EE）：</p><div class="language-sehll line-numbers-mode" data-ext="sehll"><pre class="language-sehll"><code>sudo EXTERNAL_URL=&quot;http://gitlab.example.com&quot; apt-get install gitlab-ee 替换 http://gitlab.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为你的域名或 IP 地址。 3、配置和启动 GitLab： 安装完成后， 运行配置命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo gitlab-ctl reconfigure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动 GitLab 服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo gitlab-ctl start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>置管理员密码：</p><p>访问 GitLab：在浏览器中输入 http://gitlab.example.com（替换为你的域名或 IP 地址）访问 GitLab 页面。 首次访问时，需要设置管理员密码以及登录信息。 在安装 GitLab CE 后，您需要设置一个管理员账号和密码，以便登录 GitLab CE 的 Web 界面。一般情况下，初始登录密码是随机生成的，并在安装过程中向您显示了该密码。如果您没有记录该密码，那么可以通过以下步骤来重置管理员密码：</p><ul><li><p>打开 GitLab CE 的服务器终端，并以 root 用户身份登录。</p></li><li><p>运行以下命令以打开 GitLab Rails 控制台： gitlab-rails console</p></li><li><p>运行以下命令以获取管理员账号的 user_id：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>user <span class="token operator">=</span> User.where<span class="token punctuation">(</span>id: <span class="token number">1</span><span class="token punctuation">)</span>.first
puts user.id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行以下命令以重置管理员密码：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">user.password</span><span class="token operator">=</span><span class="token string">&#39;R#2sT8@pW!d3Md&#39;</span>
<span class="token assign-left variable">user.password_confirmation</span><span class="token operator">=</span><span class="token string">&#39;R#2sT8@pW!d3Md&#39;</span>
user.save<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，new_password 是您要设置的新密码。</p><ul><li>关闭 GitLab Rails 控制台并重新启动 GitLab CE：</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>exitg
gitlab-ctl restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用新密码登录 GitLab CE 的 Web 界面。</p><h3 id="二、配置-gitlab-的-ci-cd" tabindex="-1"><a class="header-anchor" href="#二、配置-gitlab-的-ci-cd" aria-hidden="true">#</a> 二、配置 GitLab 的 CI/CD</h3><p>GitLab 项目的 CI/CD 配置中使用该 Runner 来运行<strong>持续集成和持续交付任务</strong>。</p><p>注意： centos7，与 Ubuntu（乌班图系统）存在差异，命令方式存在不同，以下是乌班图的</p><p>添加 GitLab Runner 的官方存储库并安装它：</p><p>2.1、添加存储库密钥：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -L https://packages.gitlab.com/gpg.key | sudo apt-key add -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.2、添加存储库：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &quot;deb https://packages.gitlab.com/runner/gitlab-runner/ubuntu/ $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/gitlab-runner.list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.3、更新包列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.4、安装 GitLab Runner：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo apt install gitlab-runner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.5.重启相关的服务：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl daemon-reload
sudo systemctl restart gitlab-runner.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.6.确认GitLab Runner是否已经成功安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>gitlab-runner --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些步骤将从官方存储库中安装最新版本的 GitLab Runner。</p><h3 id="三、配置gitlaub的-gitlab-ci-yml文件" tabindex="-1"><a class="header-anchor" href="#三、配置gitlaub的-gitlab-ci-yml文件" aria-hidden="true">#</a> 三、配置gitlaub的.gitlab-ci.yml文件</h3><p>在根目录中的.gitlab-ci.yml文件中指定构建、测试和部署的脚本。</p><p>在这里我只是将军一个简单的Java项目如何进行配置。</p>`,45),u={href:"https://www.cnblogs.com/cjsblog",target:"_blank",rel:"noopener noreferrer"},p={href:"https://www.cnblogs.com/cjsblog/p/12256843.html",target:"_blank",rel:"noopener noreferrer"};function b(g,v){const s=t("ExternalLinkIcon");return l(),r("div",null,[o,a("p",null,[e("以上有部分内容来源博客园："),a("a",u,[e("狂乱的贵公子"),i(s)]),e(),a("a",p,[e("GitLab CI/CD"),i(s)])])])}const x=n(c,[["render",b],["__file","Gitlab的CICD.html.vue"]]);export{x as default};
